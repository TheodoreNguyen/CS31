project 6 

Theodore Nguyen		704-156-701	CS31 SPR 2014

=========================================================================

(1)(a)

int main()
{
	int arr[3] = { 5, 10, 15 };
	int* ptr = arr;

	*ptr = 10;          // set arr[0] to 10
	ptr++;
	*ptr = 20;      // set arr[1] to 20
	ptr++;
	ptr[0] = 30;        // set arr[2] to 30

	while (ptr >= arr)
	{
		cout << ' ' << *ptr;    // print values
		ptr--;
	}
	cout << endl;
}

========================================================================


(1)(b) Because the pointer was not passed by reference to findDisorder,
there was a compilation error. This was fixed by just adding the ampersand
to pointer p in the findDisorder parameters.

    void findDisorder(int arr[], int n, int* &p)
    {
        for (int k = 1; k < n; k++)
        {
            if (arr[k] < arr[k-1])
            {
                 p = arr + k;
                 return;
            }
        }
	p = nullptr;
    }       
        
    int main()
    {
        int nums[6] = { 10, 20, 20, 40, 30, 50 };
        int* ptr;

        findDisorder(nums, 6, ptr);
	if (ptr == nullptr)
	    cout << "The array is ordered" << endl;
	else
	{
            cout << "The disorder is at address " << ptr << endl;
            cout << "It's at index " << ptr - nums << endl;
            cout << "The item's value is " << *ptr << endl;
	}
    }

=======================================================================


(1)(c) The pointer p hasnt been initialized; it doesnt point
to anything! To fix the problem, make a double variable and have
p point to it.


 #include <iostream>
    #include <cmath>
    using namespace std;

    void hypotenuse(double leg1, double leg2, double* resultPtr)
    {
        *resultPtr = sqrt(leg1*leg1 + leg2*leg2);
    }

    int main()
    {
	double hyp1;
        double* p;
	p = &hyp1;
        hypotenuse(1.5, 2.0, p);
        cout << "The hypotenuse is " << *p << endl;
    }


======================================================================

(1)(d)  The function tries to increment arrays and compare
arrays directly. Instead, I create a pointer to the arrays
and increment the pointers/compare the array values via the pointers.
 

bool match(const char str1[], const char str2[])
    {
	const char* pt1 = str1;
	const char* pt2 = str2; 
        while (*pt1 != 0  &&  *pt2 != 0)  // zero bytes at ends
        {
            if (*pt1 != *pt2)  // compare corresponding characters
                return false;
            pt1++;            // advance to the next character
            pt2++;
        }
        return *pt1 == *pt2;   // both ended at same time?
    }

    int main()
    {
        char a[10] = "Lien";
        char b[10] = "Lin";

        if (match(a,b))
            cout << "They're the same guy!\n";
    }

======================================================================

(1)(e)
The program is trying to assign an integer pointer to computeSquares.
The desired integer array created in computeSquares, however,
is local to the computeSquares function; therefore, trying to access
the array elements the main function results in producing
undefined behavior.




======================================================================

(2)

#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
using namespace std;

int main()
{
	string* fp;		//a
	string fish[5];		//b
	fp = &fish[4];		//c
	*fp = "yellowtail";	//d
	*(fish + 3) = "salmon";	//e
	fp -= 3;		//f
	fp[1] = "tuna";		//g	
	fp[0] = "eel";		//h	
	bool d = fp == fish;	//i
	bool b = *fp == *(fp++);//j

	for (int k = 0; k < 5; k++)
		cout << fish[k] << endl;
	cout << b << " " << d << endl;
}


======================================================================


(3)(a)


   double computeAverage(const double* scores, int nScores)
    {
        const double* ptr = scores;
        double tot = 0;
	int i = 0;
        while (i < nScores)
        {
            tot += *(ptr + i);
            i++;
        }
        return tot/nScores;
    }



======================================================================



(3)(b)

const char* findTheChar(const char str[], char chr)
{
	const char* begin = str;
	for (int k = 0; *(begin + k) != 0; k++)
		if (*(begin+k) == chr)
			return (start + k);
	return nullptr;
}

   

======================================================================


(3)(c)


const char* findTheChar(const char* str, char chr)
    {
	while(*str != 0)
	{
		if (*(str) == chr)
			return &*(str);
		str++;
	}
        return nullptr;
    }



======================================================================


(4)

 #include <iostream>

    using namespace std;


    int* minimart(int* a, int* b)	// creates FCN that RETURNS POINTER to an INT, after taking in TWO POINTERS TO INTS
    {
        if (*a < *b)			// return the smaller of the two pointers taken in
            return a;
        else
            return b;
    }

    void swap1(int* a, int *b)		//creates a fcn that takes in two pointers: it eventually swaps the two pointers
    {
        int* temp = a;			//creates a temporary pointer to store one of them in order to overwrite the other
        a = b;			////// sets a temp ptr = a ptr; sets a ptr = b ptr; sets b ptr = temp ptr (a's original ptr)
        b = temp;		//SWAPS POINTER VALUES
    }

    void swap2(int* a, int *b)			
    {
        int temp = *a;		/// sets temp int equal = int a points to; sets int that a pts to equal to int b pts to
        *a = *b;		// sets sets int that b points to = temp which is int that a pointed to.
        *b = temp;		//SWAPS THE VALUES THAT THE POINTERS POINT TO
    }

    int main()
    {
        int array[6] = { 5, 3, 4, 17, 22, 19 };		// defines an integer array of 6 elements				{ 5, 3 , 4 , 17 , 22 , 19 }

					    //MINIMART takes in two pointers that point to an integer and returns the pointer location for the smaller integer
							// defines a pointer to an integer and sets it equal to the fcn value -> enters element#0 and #2
        int* ptr = minimart(array, &array[2]);			// this inputs 5 and 4 respectively; 4 is smaller so returns element#2
									// thus, ptr now points to element#2 of the array;	ptr = &array[2]


        ptr[1] = 9;					// sets element#3 of the array equal to 9 through the pointer; 		{ 5 , 3 , 4 , 9 , 22 , 19 }
        ptr += 2;					// ptr now points to array[4]						ptr = &array[4]
        *ptr = -1;					// array[4] = -1; 22 --> -1						{ 5 , 3 , 4 , 9 , -1 , 19 }						
        *(array+1) = 79;				// sets array[1], which has 3 in it, to 79 				{ 5 , 79 , 4 , 9 , -1 , 19 }

        cout << "diff=" << &array[5] - ptr << endl;	// the value of &array[5] - ptr is equivalent to position of array[3]
								//outputs the difference between the address of the array's 5th and 4th elements

        swap1(&array[0], &array[1]);			//SWAP1 swaps pointer positions: swaps local variables a and b, but nothing in main 
        swap2(array, &array[2]);			//SWAP2 swaps the values at two ptr positions: swaps elements#0 and #2	{ 4 , 79 , 5 , 9 , -1 , 19 }

        for (int i = 0; i < 6; i++)
            cout << array[i] << endl;			//visits every element in the array and prints it out			{ 4 , 79 , 5 , 9 , -1 , 19 }
    }


in the end, the output will say:


diff=1
4
79
5
9
-1
19





======================================================================


(5)

void deleteG(char s[]) 
{
    char* ptr = s;
    while (*ptr != '\0') 
	{
        if (*ptr == 'g' || *ptr == 'G') 
		{
            	while(*ptr != '\0') 
			{
                	*ptr = *(ptr+1); 
                	ptr++;
            		}
            	ptr = s; 
        	}
        ptr++;
    	}
}